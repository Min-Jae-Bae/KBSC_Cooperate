import com.example.rooftop.buildSrc.Libs

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}
apply plugin: 'com.google.gms.google-services'

// Reads the Google maps key that is used in the AndroidManifest
Properties properties = new Properties()
if (rootProject.file("local.properties").exists()) {
    properties.load(rootProject.file("local.properties").newDataInputStream())
}

// For testing on CI, a key can also be provided via an environment variable.
// The local.properties key takes precedence
String systemGoogleMapsKey = System.getenv("GOOGLE_MAPS_KEY") ?: ""
String googleMapsKey = properties.getProperty("google.maps.key", systemGoogleMapsKey)

android {
    compileSdkVersion 31
    defaultConfig {
        applicationId "com.example.kbsc_cooperate"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.compose.samples.crane.CustomTestRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments["dagger.hilt.disableModulesHaveInstallInCheck"] = "true"
            }
        }

        manifestPlaceholders = [ googleMapsKey : googleMapsKey ]
    }

    signingConfigs {
        // We use a bundled debug keystore, to allow debug builds from CI to be upgradable
        debug {
            storeFile rootProject.file('debug.keystore')
            storePassword 'qoalswo123'
            keyAlias 'debug'
            keyPassword 'qoalswo123'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        benchmark {
            signingConfig signingConfigs.debug
            matchingFallbacks = ['release']
            debuggable false
        }

        release {
            minifyEnabled true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
        compose true

        // Disable unused AGP features
        buildConfig false
        aidl false
        renderScript false
        resValues false
        shaders false
    }

    composeOptions {
        kotlinCompilerExtensionVersion Libs.AndroidX.Compose.version
    }

    packagingOptions {
        // Multiple dependency bring these files in. Exclude them to enable
        // our test APK to build (has no effect on our AARs)
        excludes += "/META-INF/AL2.0"
        excludes += "/META-INF/LGPL2.1"
    }
}

dependencies {
    implementation Libs.Kotlin.stdlib
    implementation Libs.Kotlin.Coroutines.android
    implementation Libs.GoogleMaps.maps
    implementation Libs.GoogleMaps.composeMaps
    implementation 'com.google.firebase:firebase-common-ktx:20.1.1'
    implementation 'com.google.firebase:firebase-auth-ktx:21.0.7'
    implementation platform('com.google.firebase:firebase-bom:30.3.0')
    implementation 'com.google.firebase:firebase-auth:19.2.0'

    constraints {
        // Volley is a transitive dependency of maps
        implementation(Libs.Volley.volley) {
            because("Only volley 1.2.0 or newer are available on maven.google.com")
        }
    }

    coreLibraryDesugaring Libs.coreLibraryDesugar
    implementation Libs.AndroidX.Activity.activityCompose
    implementation Libs.AndroidX.Lifecycle.navigation
    implementation Libs.AndroidX.appcompat
    implementation Libs.AndroidX.Compose.runtime
    implementation Libs.AndroidX.Compose.runtimeLivedata
    implementation Libs.AndroidX.Compose.foundation
    implementation Libs.AndroidX.Compose.material
    implementation Libs.AndroidX.Compose.materialWindow
    implementation Libs.AndroidX.Compose.layout
    implementation Libs.AndroidX.Compose.animation
    implementation Libs.AndroidX.Compose.toolingPreview
    implementation Libs.AndroidX.Lifecycle.viewModelCompose
    debugImplementation Libs.AndroidX.Compose.tooling

    implementation Libs.AndroidX.Lifecycle.viewModelKtx
    implementation Libs.Hilt.android
    implementation Libs.Hilt.navigation
    kapt Libs.Hilt.compiler

    implementation Libs.Coil.coilCompose

    implementation Libs.Retrofit2.converterMoshi

    implementation Libs.Moshi.kotlin

    debugImplementation Libs.AndroidX.Compose.uiTestManifest

    androidTestImplementation Libs.JUnit.junit
    androidTestImplementation Libs.AndroidX.Test.core
    androidTestImplementation Libs.AndroidX.Test.runner
    androidTestImplementation Libs.AndroidX.Test.espressoCore
    androidTestImplementation Libs.AndroidX.Test.rules
    androidTestImplementation Libs.AndroidX.Test.Ext.junit
    androidTestImplementation Libs.Kotlin.Coroutines.test
    androidTestImplementation Libs.AndroidX.Compose.uiTest
    androidTestImplementation Libs.Hilt.android
    androidTestImplementation Libs.Hilt.testing
    kaptAndroidTest Libs.Hilt.compiler

    implementation "androidx.compose.material:material-icons-extended:1.1.1"

    implementation "com.kakao.sdk:v2-all:2.11.0" // 전체 모듈 설치, 2.11.0 버전부터 지원
    implementation "com.kakao.sdk:v2-user:2.11.0" // 카카오 로그인
    implementation "com.kakao.sdk:v2-talk:2.11.0" // 친구, 메시지(카카오톡)
    implementation "com.kakao.sdk:v2-story:2.11.0" // 카카오스토리
    implementation "com.kakao.sdk:v2-share:2.11.0" // 메시지(카카오톡 공유)
    implementation "com.kakao.sdk:v2-navi:2.11.0" // 카카오내비
    implementation "com.kakao.sdk:v2-friend:2.11.0" // 카카오톡 소셜 피커, 리소스 번들 파일 포함

    implementation platform('com.google.firebase:firebase-bom:30.3.1')
    implementation 'com.google.firebase:firebase-analytics-ktx'

    implementation("com.navercorp.nid:oauth:5.1.1")
    //implementation(files("libs/oauth-5.1.1.aar"))
}

kapt {
    correctErrorTypes true
}

